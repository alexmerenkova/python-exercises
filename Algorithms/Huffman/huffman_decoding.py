"""
Декодирование Хаффмана

Восстановите строку по её коду и беспрефиксному коду символов.
В первой строке входного файла заданы два целых числа k и l через пробел — 
количество различных букв, встречающихся в строке, и размер получившейся 
закодированной строки, соответственно. В следующих k строках записаны коды букв
в формате "letter: code". Ни один код не является префиксом другого. 
Буквы могут быть перечислены в любом порядке. В качестве букв могут встречаться
лишь строчные буквы латинского алфавита; каждая из этих букв встречается в строке
хотя бы один раз. Наконец, в последней строке записана закодированная строка. Исходная
строка и коды всех букв непусты. Заданный код таков, что закодированная строка имеет 
минимальный возможный размер.

В первой строке выходного файла выведите строку s. Она должна состоять из строчных букв
латинского алфавита. Гарантируется, что длина правильного ответа не превосходит 10^4 символов.

Sample Input 1:
1 1
a: 0
0

Sample Output 1:
a

Sample Input 2:
4 14
a: 0
b: 10
c: 110
d: 111
01001100100111

Sample Output 2:
abacabad
"""
def decoding():
    k, l = [int(i) for i in input().split()]
    str_dict = {}
    decode_str = ''
    for _ in range(k):
        x, y = input().split(":")
        str_dict[x] = y.strip()
    code_str = input()
    while code_str:
        for k, v in str_dict.items():
            if code_str.startswith(v):
                code_str = code_str[len(v):]
                decode_str += k
                break
    print(decode_str)

if __name__ == "__main__":
    decoding()
